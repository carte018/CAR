#**
 * Copyright 2015 - 2019 Duke University
 
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License Version 2 as published by
    the Free Software Foundation.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License Version 2
    along with this program.  If not, see <https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt>.

 *#
<html>

	<div id="main">
		<h1>$intro</h1>
		
		<div id="sidebar" class="content-section">
			<h3>${held-by}:</h3>
			<div class="resource-holder-name" style="margin-top: -0.75em">
				$rhdisplayname
			</div>
			<div style="text-align: center; color: #001a57; font-size: 2em; margin: 0.75em 0;">&#8681;</div>
			#if($rpiconurl)
				<div id="rp-img" class="rp-icon" style="margin-top: -0.75em;"><img src="$rpiconurl"/></div>
			#end
			<h3>$rpdisplayname</h3>
			#if($rpdescription && ! $rpdescription.equals(""))
				<div style="margin-top: -0.5em; color: #555">$rpdescription</div>
			#end

			#if($rpprivacyurl)
				<div><a href="$rpprivacyurl" id="rp-privacy-link" target="_blank">${rpdisplayname}'s ${privacy-policy}</a></div>
			#end <span style="clear: both;"></span>
			
		</div>
		
		<div id="left">
			#if($hasMustDecisions || $hasMay)
			
				<div class="content-section">
					#if ($hasChoices)
						<h3>$title-choice</h3>
					#else
						<h3>$title-nochoice</h3>
					#end
					#if($hasMustDecisions) 
						<h5>${edit-presets}:</h5>
						<table class="consent-table" id="must-decision-table">
							<thead>
							<tr>
								<th class="Permit">Permit</th>
								<th class="Deny">Deny</th>
								<th>&nbsp;</th>
							</tr>
							</thead>
							<tbody>
							
							</tbody>
						</table>
					#end
					#if($hasMay)
						<h5>${update-settings}:</h5>
						<table class="consent-table" id="may-decision-table">
							<thead>
							<tr>
								<th class="Permit">Permit</th>
								<th class="Deny">Deny</th>
								<th>&nbsp;</th>
							</tr>
							</thead>
							<tbody>
						
							</tbody>
						</table>
					#end
				</div>
			#end
			#if($hasNoChoice)
				<div style="margin-bottom: 2em"><p><a href="#" id="required-toggle"><span id="required-expand">+</span> ${mandatory-header}</a></p>
					<div class="content-section" id="required-info" style="display:none;">
						<ul class="simple-list" id="nochoicelist">
														
						</ul>
					</div>
				</div>
			#end
					
			<div class="content-section">
				<div class="form-set">
					<input id="remember-show" name="remember" value="saveandshow" type="checkbox" #if($userShowAgain && $userShowAgain.equals("true"))checked#end style="display: none;"></input>
					<input id="remember-hide" name="remember" value="saveandhide" type="checkbox" #if(! $userShowAgain || $userShowAgain.equals("false"))checked#end></input>
					<label	for="remember" class="inline">${dont-show} $rpdisplayname</label>
					<!-- RGC - remove for pilot <p style="margin-top: -0.15em; margin-bottom: -0.5em"><small><em>${self-service-description} <a href="#" id="selfservicelink">privacy.duke.edu</a></small></p> -->
				</div>
				<button class="active" id="button_accept_and_continue">${save-continue}<i class="button-icon-right fa fa-arrow-right"></i></button>
				<button class="passive" id="button_cancel">${cancel}<i class="button-icon-right fa fa-times"></i></button>
			</div> 
    </div>
    
    <form name="master_return_form" id="master_return_form" method="POST" action="$actionUrl" style="display: none;">

	<input type="hidden" name="csrftoken" value="$csrftoken">
	
  	#foreach ($mustDecision in $injectedDecisions)
  		#if($counters) {
  			#if($counters.containsKey($mustDecision.getAttrName()))
  				#set($newval=$counters.get($mustDecision.getAttrName())) 
  				#set($newval=$newval + 1)
  				$counters.put($mustDecision.getAttrName(),$newval)
			#else
				$counters.put($mustDecision.getAttrName(),0)
			#end
			#set($counter=$counters.get($mustDecision.getAttrName()))
		#else
			#set($counter=0)
		#end

  		<div class="decision must" id="valuemap_$mustDecision.getAttrName()_$counter">
  			<input type="text" class="attr_value" name="valuemap_$mustDecision.getAttrName()_$counter" value="$mustDecision.getAttrValue()">
  			<span class="attr_name">$mustDecision.getAttrName()</span>
  			<span class="attr_displayname">$mustDecision.getAttrDisplayName()</span>
  			<span class="attr_displayvalue">$mustDecision.getAttrDisplayValue()</span>
  			<span class="attr_reason">$areason.get($mustDecision.getAttrName())</span>
  			#if ($mustDecision.getRecommendedDirective()=="permit")
  			 	<input class="must_decision_pair" id="radio_$mustDecision.getAttrName()_permit_$counter" type="radio" name="radio_$mustDecision.getAttrName()_$counter" value="permit" checked>
  				<input class="must_decision_pair" id="radio_$mustDecision.getAttrName()_deny_$counter" type="radio" name="radio_$mustDecision.getAttrName()_$counter" value="deny">
  			#else
  				<input class="must_decision_pair" id="radio_$mustDecision.getAttrName()_permit_$counter" type="radio" name="radio_$mustDecision.getAttrName()_$counter" value="permit">
  				<input class="must_decision_pair" id="radio_$mustDecision.getAttrName()_deny_$counter" type="radio" name="radio_$mustDecision.getAttrName()_$counter" value="deny" checked>
  			#end
  		</div>
  	#end
  	#foreach ($mayDecision in $injectedMayDecisions)
  	
  	 	#if($counters) {
  			#if($counters.containsKey($mayDecision.getAttrName()))
  				#set($newval=$counters.get($mayDecision.getAttrName())) 
  				#set($newval=$newval + 1)
  				$counters.put($mayDecision.getAttrName(),$newval)
			#else
				$counters.put($mayDecision.getAttrName(),0)
			#end
			#set($counter=$counters.get($mayDecision.getAttrName()))
		#else
			#set($counter=0)
		#end
  		<div class="decision may" id="valuemap_$mayDecision.getAttrName()_$counter">
  			<input type="text" class="attr_value" name="valuemap_$mayDecision.getAttrName()_$counter" value="$mayDecision.getAttrValue()">
  			<span class="attr_name">$mayDecision.getAttrName()</span>
  			<span class="attr_displayname">$mayDecision.getAttrDisplayName()</span>
  			<span class="attr_displayvalue">$mayDecision.getAttrDisplayValue()</span>
  			<span class="attr_reason">$areason.get($mayDecision.getAttrName())</span>
  			#if ($mayDecision.getChosenDirective()=="permit")
  				<input class="may_decision_pair" id="radio_$mayDecision.getAttrName()_permit_$counter" type="radio" name="radio_$mayDecision.getAttrName()_$counter" value="permit" checked>
  				<input class="may_decision_pair" id="radio_$mayDecision.getAttrName()_deny_$counter" type="radio" name="radio_$mayDecision.getAttrName()_$counter" value="deny">
  			#else
  			 	<input class="may_decision_pair" id="radio_$mayDecision.getAttrName()_permit_$counter" type="radio" name="radio_$mayDecision.getAttrName()_$counter" value="permit">
  				<input class="may_decision_pair" id="radio_$mayDecision.getAttrName()_deny_$counter" type="radio" name="radio_$mayDecision.getAttrName()_$counter" value="deny" checked>
  			#end
  		</div>
  	#end
  	#foreach ($nochoiceDecision in $injectedNochoiceDecisions)
  	
  	 	#if($counters) {
  			#if($counters.containsKey($nochoiceDecision.getAttrName()))
  				#set($newval=$counters.get($nochoiceDecision.getAttrName())) 
  				#set($newval=$newval + 1)
  				$counters.put($nochoiceDecision.getAttrName(),$newval)
			#else
				$counters.put($nochoiceDecision.getAttrName(),0)
			#end
			#set($counter=$counters.get($nochoiceDecision.getAttrName()))
		#else
			#set($counter=0)
		#end
		
  		<div class="nochoice" id="valuemap_$nochoiceDecision.getAttrName()_$counter">
  			<input type="text" class="attr_value" name="valuemap_$nochoiceDecision.getAttrName()_$counter" value="$nochoiceDecision.getAttrValue()">
  			<span class="attr_name">$nochoiceDecision.getAttrName()</span>
  			<span class="attr_displayname">$nochoiceDecision.getAttrDisplayName()</span>
  			<span class="attr_displayvalue">$nochoiceDecision.getAttrDisplayValue()</span>
  			<!-- no reason for nochoice values -->
  			#if ($nochoiceDecision.getChosenDirective()=="permit")
  				<input class="nochoice_decision_pair" id="radio_$nochoiceDecision.getAttrName()_permit_$counter" type="radio" name="radio_$nochoiceDecision.getAttrName()_$counter" value="permit" checked readonly>
  				<input class="nochoice_decision_pair" id="radio_$nochoiceDecision.getAttrName()_deny_$counter" type="radio" name="radio_$nochoiceDecision.getAttrName()_$counter" value="deny" readonly>
	  		#else
	  			<input class="nochoice_decision_pair" id="radio_$nochoiceDecision.getAttrName()_permit_$counter" type="radio" name="radio_$nochoiceDecision.getAttrName()_$counter" value="permit" readonly>
  				<input class="nochoice_decision_pair" id="radio_$nochoiceDecision.getAttrName()_deny_$counter" type="radio" name="radio_$nochoiceDecision.getAttrName()_$counter" value="deny" checked readonly>
  			#end
  		</div>
  	#end
  	<input type="checkbox" name="saveandhide" value="1">save and dont show</input>
  	<input type="checkbox" name="saveandshow" value="2">save and show again</input>
  	<input type="checkbox" name="dontsave" value="3">dont save</input>
  	<input type="checkbox" name="alltheway" value="1">pushToIdp</input>
  	<input type="submit" value="submit" name="submit_button">
  </form>
  </body>
</html>

<script type="text/javascript">

$( document ).ready(function() {
    $('#rp-privacy-link').leanModal();
    $('#choice-options button').click(function(e){
      e.preventDefault();
      $("#continue-nochoice").hide();
      $("#continue-options").show();
      $("#must_header_without_recommendation").show();
      $("#must_header_with_recommendation").hide();
    });

    $("a#show-nochoice").click(function(e){
      e.preventDefault();
      $(this).hide();
      $("#other-attrs-summary").show();
    });

    $("a#hide-nochoice").click(function(e){
      e.preventDefault();
      $("#other-attrs-summary").hide();
      $("a#show-nochoice").show();
    });

    $("button#edit-choices").click(function(e){
      e.preventDefault();
      $("#release-choices").show();
      $("#release-summary").hide();
    });

    $("a#hide-choice").click(function(e){
      e.preventDefault();
      $("#release-choices").hide();
      $("#release-summary").show();
    });
    
    $("a#required-toggle").click(function(e){
      	e.preventDefault();
      	$("#required-info").slideToggle("slow",function() {
      		if($(this).is(":hidden")){
      			$("#required-expand").html("+");
      		} else {
      			$("#required-expand").html("-");
      		}
      	});
      });


  
    $("a#show-rp-lite-link").click(function(e){
      e.preventDefault();
      $("#rp-show-info-lite").show();
      $(this).hide();
    });
  
    $("a#hide-rp-info-lite").click(function(e){
      e.preventDefault();
      $("#rp-show-info-lite").hide();
     $("a#show-rp-lite-link").show();
    });
    
    $("button#button_accept_and_continue").click(function(e){
    	e.preventDefault();
    	setMemory();
		$("#master_return_form").find("input[name='alltheway']").prop("checked",true);    	
		$("#master_return_form").submit();
    });
    
    $("button#button_cancel").click(function(e){
    	e.preventDefault();
    	setMemory();
    	window.location.href = "/car/carma/cancel";
    });
    
    updateAll();
  });
  
  function setMemory(){
    	$vstring = $("#remember-options").find("input.remember:checked").val();
  
    if ($("#remember-hide").is(":checked")) {
    	// $("#master_return_form").find("input[name='saveandhide']").prop("checked",$vstring=="saveandhide");
    	$("#master_return_form").find("input[name='saveandhide']").prop("checked",true);
    } else {
    	// $("#master_return_form").find("input[name='saveandshow']").prop("checked",$vstring=="saveandshow");
    	$("#master_return_form").find("input[name='saveandshow']").prop("checked",true);
	}
  }    	
  
    
  function updateAll(){
   
    drawDisplayTable($("#must-table"), $.makeArray($(".decision.must")));
    drawDisplayTable($("#may-table"), $.makeArray($(".decision.may")));
    drawNewNoChoiceDisplayTable($("#nochoicelist"),$.makeArray($(".nochoice")));
    drawNewChoiceTable();
  }
  function drawNewNoChoiceDisplayTable(list,li_collection){
  	$("#nochoicelist").html("");
     var $permit = [];
     var $nccount = 0;
     $.each(li_collection, function() {
     	$nccounc = $nccount + 1;
     	$decision = $(this).find("input.nochoice_decision_pair:checked").val();
     	$display_name = $(this).find("span.attr_displayname").html();
     	$value = $(this).find("input.attr_value").val();
     	$display_value=$(this).find("span.attr_displayvalue").html();
     	
     	$reason = $(this).find("span.attr_reason").html();
     	if ($permit[$display_name] == undefined) {
     	  $permit[$display_name] = "true";
     	  var row = "";
     	  if (asndJS[$display_name] ==  undefined || asndJS[$display_name] != 'true') {
     	  	if ($decision == "permit") {
     	  		$display_values = permitNoJS[$display_name].sort().join(", ");
     	  		row += "<li>" + $display_name + ": <strong>" + $display_values + "</strong></li>";
     	  	} 
     	  	$("#nochoicelist").append(row);
     	  }
     	 }
     });
  }

  function drawNoChoiceDisplayTable(table, row_collection){
  	table.html("");
  	var $permit = [];
  	var $nccount = 0;
  	return;
  	$.each(row_collection, function(){
  		$nccount = $nccount + 1;
  		$decision = $(this).find("input.nochoice_decision_pair:checked").val();
  		$display_name = $(this).find("span.attr_displayname").html();
  		$value = $(this).find("input.attr_value").val();
  		$display_value=$(this).find("span.attr_displayvalue").html();
					
  		$reason = $(this).find("span.attr_reason").html();
		if ($permit[$display_name] == undefined) {
			$permit[$display_name] = "true";
  			var row = "";
  			if (asndJS[$display_name] == undefined || asndJS[$display_name] != 'true') {
  			if ($decision == "permit"){
  		  		$display_values = permitNoJS[$display_name].sort().join(", ");	
	  			row += "<tr><td class='necessary' nowrap><img src='resources/img/necessary.png'>&nbsp;</td>";
	  			if (sensitivityJS[$display_name] == undefined || sensitivityJS[$display_name] != 'true') {
  					row += "<td><div class='label'>" + $display_name + " (" + $display_values + ")</div>";
  				} else {
  					//row += "<td><div class='label'>" + $display_name + " (" + "<span class='showcl' id='nos"+$nccount+"' onclick='document.getElementById(&apos;nos"+$nccount+"&apos;).innerHTML=&apos;"+$display_values+"&apos; ; document.getElementById(&apos;disp"+$dispcount+"&apos;).className=&apos;label&apos;'>Click to display sensitive information</span>)</div>";
  					row += "<td><div class='label'>" + $display_name + " (" + "<span class='showcl' id='nos"+$nccount+"' onclick='sensflip(&apos;nos"+$nccount+"&apos;,&apos;"+$display_values+"&apos;);'>Click to display sensitive information</span>)</div>";
  					
				}  					
  				if ($reason == undefined) {
	  				row += "</td></tr>";
  				} else {
	  				row += "<span class='subset'>" + $reason + "</span></td></tr>";
  				}
  				table.append(row);
  			}
  			}
  		}
  	});
  }

  function drawDisplayTable(table, row_collection){
    table.html("");
    var $type = "must";
    var $permit = [];
    var $deny = [];
    var $dispcount = 0;
    return;
    $.each(row_collection, function(){
      $dispcount = $dispcount + 1;
      $decision = $(this).find("input.must_decision_pair:checked").val();
      if (! $decision) {
      	$decision = $(this).find("input.may_decision_pair:checked").val();
      	$type = "may";
      	if (! $decision) {
      		$decision = $(this).find("input.nochoice_decision_pair:checked").val();
      		$type = "no";
      	}
      }
 
      $display_name = $(this).find("span.attr_displayname").html();
      $value = $(this).find("input.attr_value").val(); 
      $display_value = $(this).find("span.attr_displayvalue").html();
      $reason = $(this).find("span.attr_reason").html();
      
      if (asndJS[$display_name] == undefined || asndJS[$display_name] != 'true') {
      
      if (($permit[$display_name] == undefined && $decision == "permit") || ($deny[$display_name] == undefined && $decision == "deny")) {
      	if ($decision == "permit") {
      		$permit[$display_name] = "true";
      	} else {
      		$deny[$display_name] = "true";
      	}
	    var row = "";
      	if($decision == "permit"){row += "<tr><td class='permit' nowrap><img src='resources/img/check-green.png'>PERMIT</td>"}
      	else if($decision == "deny"){row += "<tr><td class='deny' nowrap><img src='resources/img/x-red.png'>DENY</td>"}
      	else {row += "<tr><td class='necessary' nowrap><img src='resources/img/necessary.png'>&nbsp;</td>"}
      
      	if ($decision == "permit") {
      		if ($type == "must") {
      			$display_values = permitInjectedJS[$display_name].sort().join(", ");
      		} else if ($type == "may") {
      			$display_values = permitMayJS[$display_name].sort().join(", ");
      		} 
      	} else {
      		if ($type == "must") {
      			$display_values = denyInjectedJS[$display_name].sort().join(", ");
      		} else if ($type == "may") {
      			$display_values = denyMayJS[$display_name].sort().join(", ");
      		}
      	}
      	if (sensitivityJS[$display_name] == undefined || sensitivityJS[$display_name] != 'true') {
      		row += "<td><div class='label'>" + $display_name + " (" + $display_values + ")</div>";
      	} else {
      		row += "<td><div class='label'>" + $display_name + " (" + "<span class='showcl' id='disp"+$dispcount+"' onclick='sensflip(&apos;disp"+$dispcount+"&apos;,&apos;"+$display_values+"&apos;);'>Click to display sensitive information</span>)</div>";
      	}
      	row += "<span class='subset'>" + $reason + "</span></td></tr>";
      	table.append(row);
      	
      }
      }
    });
  }
  
  function sensflip(targ,val) {
  	document.getElementById(targ).innerHTML=val;
  	//document.getElementById(targ).className='labelcl';
  	$("#"+targ)[0].onclick = null;
  	$("#"+targ).click(function(e) { e.preventDefault(); sensuflip(targ,val); });
  }
  function sensuflip(targ,val) {
    document.getElementById(targ).innerHTML="Click to show sensitive information";
    //document.getElementById(targ).className='showcl';
    $("#"+targ)[0].onclick = null;
    $("#"+targ).click(function(e) { e.preventDefault(); sensflip(targ,val); });
  }
  
  function drawNewChoiceTable() {
  	var displayedPAOs = [];
  	musttable = $("table#must-decision-table tbody");
  	musttable.html("");
  	maytable = $("table#may-decision-table tbody");
  	maytable.html("");
  	choices = $.makeArray($(".decision"));
  	var $dispcount=0;
  	$.each(choices, function() {
  		$dispcount = $dispcount + 1;
  		var row="";
  		var $type = "";
  		$value = $(this).find("input.attr_value").val();
  		if ($decision=$(this).find("input.must_decision_pair:checked").val()) {
  			$type = "must";
  		} else if ($decision=$(this).find("input.may_decision_pair:checked").val()) {
  			$type = "may";
  		} else {
  			$decision=$(this).find("input.nochoice_decision_pair:checked").val();
  			$type = "no";
  		}

  		$display_name = $(this).find("span.attr_displayname").html();
  		$reason = $(this).find("span.attr_reason").html();
  		$display_value = $(this).find("span.attr_displayvalue").html();
  	
  		if ($decision == "permit") {
  			if ($type == "must") {
  				$display_values = permitInjectedJS[$display_name].sort().join(", ");
  			} else if ($type == "may") {
  				$display_values = permitMayJS[$display_name].sort().join(", ");
  			}
  		} else {
  			if ($type == "must") {
  				$display_values = denyInjectedJS[$display_name].sort().join(", ");
  			} else if ($type == "may") {
  				$display_values = denyMayJS[$display_name].sort().join(", ");
  			}
  		}
		if (policytypeJS[$display_name] != 'PAO') { 
			if (asndJS[$display_name] == undefined || asndJS[$display_name] != 'true') {
				if ($decision == "permit") {
					row = "<tr><td id='permit-radio-"+$(this).attr("id")+"' class='consent-radio-permit "+$(this).attr("id")+"'><input type='radio' class='choice-button permit-button' id='permit-"+$(this).attr("id")+"' name='consent-"+$(this).attr("id")+"' value='1' checked></td><td id='deny-radio-"+$(this).attr("id")+"' class='consent-radio-deny "+$(this).attr("id")+"'><input type='radio' class='choice-button deny-button' id='deny-"+$(this).attr("id")+"' name='consent-"+$(this).attr("id")+"' value='0'></td>";
				} else {
					row = "<tr><td id='permit-radio-"+$(this).attr("id")+"' class='consent-radio-permit "+$(this).attr("id")+"'><input type='radio' class='choice-button permit-button' id='permit-"+$(this).attr("id")+"' name='consent-"+$(this).attr("id")+"' value='1'></td><td id='deny-radio-"+$(this).attr("id")+"' class='consent-radio-deny "+$(this).attr("id")+"'><input type='radio' class='choice-button deny-button' id='deny-"+$(this).attr("id")+"' name='consent-"+$(this).attr("id")+"' value='0' checked></td>";
				}
				if (sensitivityJS[$display_name] == undefined || sensitivityJS[$display_name] != 'true') {
					row += "<td>"+$display_name+": <strong>"+$display_value+"</strong><div class='consent-reason'>"+$reason+"</div></td></tr>";
				} else {
					row += "<td>"+$display_name+": <span id='disp"+$dispcount+"' onclick='sensflip(&apos;disp"+$dispcount+"&apos;,&apos;<strong>"+$display_value+"</strong><div class=content-reason>"+$reason+"</div>&apos;);'>Click to display sensitive information</span></td></tr>"; 
				}
				// row += "<td>"+$display_name+": <strong>"+$display_value+"</strong><div class='consent-reason'>"+$reason+"</div></td></tr>";
				if ($type == "must") {
					musttable.append(row);
				} else if ($type == "may") {
					maytable.append(row);
				} 
					
			}
		} else if ($.inArray($display_name,displayedPAOs) == -1) {
			displayedPAOs.push($display_name);
			if (asndJS[$display_name] == undefined || asndJS[$display_name] != 'true') {
				if ($decision == "permit") {
					row = "<tr><td id='permit-radio-"+$(this).attr("id")+"' class='consent-radio-permit "+$(this).attr("id")+"'><input type='radio' class='choice-button permit-button' id='permit-"+$(this).attr("id")+"' name='consent-"+$(this).attr("id")+"' value='1' checked></td><td id='deny-radio-"+$(this).attr("id")+"' class='consent-radio-deny "+$(this).attr("id")+"'><input type='radio' class='choice-button deny-button' id='deny-"+$(this).attr("id")+"' name='consent-"+$(this).attr("id")+"' value='0'></td>";
				} else {
					row = "<tr><td id='permit-radio-"+$(this).attr("id")+"' class='consent-radio-permit "+$(this).attr("id")+"'><input type='radio' class='choice-button permit-button' id='permit-"+$(this).attr("id")+"' name='consent-"+$(this).attr("id")+"' value='1'></td><td id='deny-radio-"+$(this).attr("id")+"' class='consent-radio-deny "+$(this).attr("id")+"'><input type='radio' class='choice-button deny-button' id='deny-"+$(this).attr("id")+"' name='consent-"+$(this).attr("id")+"' value='0' checked></td>";
				}
				//row += "<td>"+$display_name+": <strong>"+$display_values+"</strong><div class='consent-reason'>"+$reason+"</div></td></tr>";
				if (sensitivityJS[$display_name] == undefined || sensitivityJS[$display_name] != 'true') {
					row += "<td>"+$display_name+": <strong>"+$display_values+"</strong><div class='consent-reason'>"+$reason+"</div></td></tr>";
				} else {
					row += "<td>"+$display_name+": <span id='disp"+$dispcount+"' onclick='sensflip(&apos;disp"+$dispcount+"&apos;,&apos;<strong>"+$display_values+"</strong><div class=content-reason>"+$reason+"</div>&apos;);'>Click to display sensitive information</span></td></tr>";
				} 
			}
			if ($type == "must") {
				musttable.append(row);
			} else if ($type == "may") {
				maytable.append(row);
			}
		}

  	});
 	 // more here - bind events to radio input operations
 	 
 	    $('.choice-button').on("click",function(e){
		    var choice = $(this).attr("id").replace("permit-","").replace("deny-","");
      		var $form_block = $("#master_return_form div#" + choice);
      		
      		if($(this).hasClass("permit-button")){
          $form_block.find("input.must_decision_pair[value='permit']").prop("checked", true);
        $form_block.find("input.may_decision_pair[value='permit']").prop("checked", true);
        // Remove the relevant display_value from the relevant deny<>JS string, and add it to the relevant permit<>JS string
        // Do this somewhat hamfistedly
        $uname = $form_block.find("span.attr_displayname").html();
        $rname = $form_block.find("span.attr_name").html();
        var uvalarray = [];
        if (policytypeJS[$uname] == 'PAO') {
        	displayvaluesetsJS[$uname].forEach(function(v,i){
        		uvalarray.push(v);
        	});
        } else {
        	$tuval = $form_block.find("span.attr_displayvalue").html();
        	uvalarray.push($tuval);
        }

		// Set all the checked properties appropriately
  		if (policytypeJS[$uname] == 'PAO') {
  			sel="input.must_decision_pair[id^=radio_" + $rname + "_permit]";
  			$(sel).prop("checked", true);
  			sel="input.may_decision_pair[id^=radio_" + $rname + "_permit]";
  			$(sel).prop("checked", true);
  		}
  		
  		
       
        uvalarray.forEach(function(xuval,j){
        var $uval = xuval;
        var rval=$uval;
        rval1=rval.replace(RegExp("\\\|","g"),"\\\|");
        rval2=rval1.replace(RegExp("\\\+","g"),"\\\+");
        refront=RegExp("^"+rval2+", ");
        retail=RegExp(", "+rval2+"$");
        reboth=RegExp("^"+rval2+"$");
        
        if (denyInjectedJS[$uname] != undefined) {
        	// remove it
        	denyInjectedJS[$uname] = denyInjectedJS[$uname].join(", ").replace(", "+$uval+", ",", ").split(", ");
        	denyInjectedJS[$uname] = denyInjectedJS[$uname].join(", ").replace(refront,"").split(", ");
        	denyInjectedJS[$uname] = denyInjectedJS[$uname].join(", ").replace(retail,"").split(", ");
        	denyInjectedJS[$uname] = denyInjectedJS[$uname].join(", ").replace(reboth,"").split(", ");
  
        	if (denyInjectedJS[$uname] == [""] || denyInjectedJS[$uname] == [] || denyInjectedJS[$uname].join("") == "") {
        		denyInjectedJS[$uname] = undefined;
        		delete denyInjectedJS[$uname];
        	}
        	// and add it
        	if (permitInjectedJS[$uname] == undefined) {
        		permitInjectedJS[$uname] = [$uval];
        	} else {
        		permitInjectedJS[$uname] = (permitInjectedJS[$uname].join(", ") + ", " + $uval).split(", ").sort();
        	}
        }
        if (denyMayJS[$uname] != undefined) {
        	// remove it
        	denyMayJS[$uname] = denyMayJS[$uname].join(", ").replace(", "+$uval+", ",", ").split(", ");
        	denyMayJS[$uname] = denyMayJS[$uname].join(", ").replace(refront,"").split(", ");
        	denyMayJS[$uname] = denyMayJS[$uname].join(", ").replace(retail,"").split(", ");
        	denyMayJS[$uname] = denyMayJS[$uname].join(", ").replace(reboth,"").split(", ");
 
        	if (denyMayJS[$uname] == [""] || denyMayJS[$uname] == [] || denyMayJS[$uname].join("") == "") {
        		denyMayJS[$uname] = undefined;
        		delete denyMayJS[$uname];
        	}
        	// and add it
        	if (permitMayJS[$uname] == undefined) {
        		permitMayJS[$uname] = [$uval];
        	} else {
        		permitMayJS[$uname] = (permitMayJS[$uname].join(", ") + ", " + $uval).split(", ").sort();
        	}
        }
        });
      }
      else{
        $form_block.find("input.must_decision_pair[value='deny']").prop("checked", true);
        $form_block.find("input.may_decision_pair[value='deny']").prop("checked",true);
        // Reverse of above
        $uname = $form_block.find("span.attr_displayname").html();
        $rname = $form_block.find("span.attr_name").html();
        
        var uvalarray = [];
        if (policytypeJS[$uname] == 'PAO') {
        	displayvaluesetsJS[$uname].forEach(function(v,i){
        		uvalarray.push(v);
        	});
        } else {
        	$tuval = $form_block.find("span.attr_displayvalue").html();
        	uvalarray.push($tuval);
        }
      	// Set all the checked properties appropriately
  		if (policytypeJS[$uname] == 'PAO') {
  			sel="input.must_decision_pair[id^=radio_" + $rname + "_deny]";
  			$(sel).prop("checked", true);
  			sel="input.may_decision_pair[id^=radio_" + $rname + "_deny]";
  			$(sel).prop("checked", true);
  		}
  		 
        uvalarray.forEach(function(xuval,j){
        var $uval = xuval;
        var rval=$uval;
        rval1=rval.replace(RegExp("\\\|","g"),"\\\|");
        rval2=rval1.replace(RegExp("\\\+","g"),"\\\+");
        refront=RegExp("^"+rval2+", ");
        retail=RegExp(", "+rval2+"$");
        reboth=RegExp("^"+rval2+"$");
        if (permitInjectedJS[$uname] != undefined) {
        	// remove it
        	permitInjectedJS[$uname] = permitInjectedJS[$uname].join(", ").replace(", "+$uval+", ",", ").split(", ");
        	permitInjectedJS[$uname] = permitInjectedJS[$uname].join(", ").replace(refront,"").split(", ");
        	permitInjectedJS[$uname] = permitInjectedJS[$uname].join(", ").replace(retail,"").split(", ");
        	permitInjectedJS[$uname] = permitInjectedJS[$uname].join(", ").replace(reboth,"").split(", ");
 
        	if (permitInjectedJS[$uname] == [""] || permitInjectedJS[$uname] == [] || permitInjectedJS[$uname].join("") == "") {
        		permitInjectedJS[$uname] = undefined;
        		delete permitInjectedJS[$uname];
    		}
        	if (denyInjectedJS[$uname] == undefined) {
        		denyInjectedJS[$uname] = [$uval];
        	} else {
        		denyInjectedJS[$uname] = (denyInjectedJS[$uname].join(", ") + ", " + $uval).split(", ").sort();
        	}
        } 
        if (permitMayJS[$uname] != undefined) {
        	// remove it
        	permitMayJS[$uname] = permitMayJS[$uname].join(", ").replace(", "+$uval+", ",", ").split(", ");
        	permitMayJS[$uname] = permitMayJS[$uname].join(", ").replace(refront,"").split(", ");
        	permitMayJS[$uname] = permitMayJS[$uname].join(", ").replace(retail,"").split(", ");
        	permitMayJS[$uname] = permitMayJS[$uname].join(", ").replace(reboth,"").split(", ");
 
        	if (permitMayJS[$uname] == [""] || permitMayJS[$uname] == [] || permitMayJS[$uname].join("") == "") {
        		permitMayJS[$uname] = undefined;
        		delete permitMayJS[$uname];
        	}
        	if (denyMayJS[$uname] == undefined) {
        		denyMayJS[$uname] = [$uval];
        	} else {
        		denyMayJS[$uname] = (denyMayJS[$uname].join(", ") + ", " + $uval).split(", ").sort();
        	}
        }
        });	
      }
      updateAll();
    });
    
  }

  function drawChoiceTable(){
    var displayedPAOs = [];
    table = $("table#choice-table");
    table.html("");
    choices = $.makeArray($(".decision"));
    $.each(choices, function(){
      $value = $(this).find("input.attr_value").val(); 
      $type = "must";
      $decision = $(this).find("input.must_decision_pair:checked").val();
      if (!$decision) {
      	$decision = $(this).find("input.may_decision_pair:checked").val();
      	$type = "may";
      	if (!$decision) {
      		$decision = $(this).find("input.nochoice_decision_pair:checked").val();
      		$type = "nochoice";
      	}
      }
      $display_name = $(this).find("span.attr_displayname").html();
      $reason = $(this).find("span.attr_reason").html();
      $display_value = $(this).find("span.attr_displayvalue").html();
      
   	  if ($decision == "permit") {
     	if ($type == "must") {
     		$display_values = permitInjectedJS[$display_name].sort().join(", ");
     	} else if ($type == "may") {
     		$display_values = permitMayJS[$display_name].sort().join(", ");
     	} 
     } else {
     	if ($type == "must") {
     		$display_values = denyInjectedJS[$display_name].sort().join(", ");
     	} else if ($type == "may") {
     		$display_values = denyMayJS[$display_name].sort().join(", ");
     	}
     }
      if (policytypeJS[$display_name] != 'PAO') {
     	 if (asndJS[$display_name] == undefined || asndJS[$display_name] != 'true') {
      		row =  "<tr><td class='" + $(this).attr("id") + "' nowrap>";
     		 if($decision == "permit"){
     		   row += "<a href='#' class='choice-button permit active'>permit</a>";
     		   row += "<a href='#' class='choice-button deny'>deny</a>";
     		 }
    		else{
       			row += "<a href='#' class='choice-button permit'>permit</a>";
        		row += "<a href='#' class='choice-button deny active'>deny</a>";
      		}
      		row += "</td>"
      		row += "<td><div class='label'>" + $display_name + "&nbsp;(" + $display_value + ")</div><span class='subset'>" + $reason + "</span></td></tr>";
      		table.append(row);
      	}
      } else if ($.inArray($display_name,displayedPAOs) == -1) {
      	displayedPAOs.push($display_name);
        if (asndJS[$display_name] == undefined || asndJS[$display_name] != 'true') {
      	row = "<tr><td class='" + $(this).attr("id") + "' nowrap>";
      	if ($decision == "permit") {
      		row += "<a href='#' class='choice-button permit active'>permit</a>";
      		row += "<a href='#' class='choice-button deny'>deny</a>";
      	} else {
      		row += "<a href='#' class='choice-button permit'>permit</a>";
      		row += "<a href='#' class='choice-button deny active'>deny</a>";
      	}
      	row += "</td>"
      	row += "<td><div class='label'>" + $display_name + "&nbsp;(" + $display_values + ")</div><span class='subset'>" + $reason + "</span></td></tr>";
      	table.append(row);
      }
    }
  })
    
    //bind events to newly created buttons
    $('a.choice-button').click(function(e){
      e.preventDefault();
      var choice = $(this).closest("td").attr("class");
      var $form_block = $("#master_return_form div#" + choice);
      
      if($(this).hasClass("permit")){
        $form_block.find("input.must_decision_pair[value='permit']").prop("checked", true);
        $form_block.find("input.may_decision_pair[value='permit']").prop("checked", true);
        // Remove the relevant display_value from the relevant deny<>JS string, and add it to the relevant permit<>JS string
        // Do this somewhat hamfistedly
        $uname = $form_block.find("span.attr_displayname").html();
        $rname = $form_block.find("span.attr_name").html();
        var uvalarray = [];
        if (policytypeJS[$uname] == 'PAO') {
        	displayvaluesetsJS[$uname].forEach(function(v,i){
        		uvalarray.push(v);
        	});
        } else {
        	$tuval = $form_block.find("span.attr_displayvalue").html();
        	uvalarray.push($tuval);
        }

		// Set all the checked properties appropriately
  		if (policytypeJS[$uname] == 'PAO') {
  			sel="input.must_decision_pair[id^=radio_" + $rname + "_permit]";
  			$(sel).prop("checked", true);
  			sel="input.may_decision_pair[id^=radio_" + $rname + "_permit]";
  			$(sel).prop("checked", true);
  		}
  		
  		
       
        uvalarray.forEach(function(xuval,j){
        var $uval = xuval;
        var rval=$uval;
        rval1=rval.replace(RegExp("\\\|","g"),"\\\|");
        rval2=rval1.replace(RegExp("\\\+","g"),"\\\+");
        refront=RegExp("^"+rval2+", ");
        retail=RegExp(", "+rval2+"$");
        reboth=RegExp("^"+rval2+"$");
        
        if (denyInjectedJS[$uname] != undefined) {
        	// remove it
        	denyInjectedJS[$uname] = denyInjectedJS[$uname].join(", ").replace(", "+$uval+", ",", ").split(", ");
        	denyInjectedJS[$uname] = denyInjectedJS[$uname].join(", ").replace(refront,"").split(", ");
        	denyInjectedJS[$uname] = denyInjectedJS[$uname].join(", ").replace(retail,"").split(", ");
        	denyInjectedJS[$uname] = denyInjectedJS[$uname].join(", ").replace(reboth,"").split(", ");
  
        	if (denyInjectedJS[$uname] == [""] || denyInjectedJS[$uname] == [] || denyInjectedJS[$uname].join("") == "") {
        		denyInjectedJS[$uname] = undefined;
        		delete denyInjectedJS[$uname];
        	}
        	// and add it
        	if (permitInjectedJS[$uname] == undefined) {
        		permitInjectedJS[$uname] = [$uval];
        	} else {
        		permitInjectedJS[$uname] = (permitInjectedJS[$uname].join(", ") + ", " + $uval).split(", ").sort();
        	}
        }
        if (denyMayJS[$uname] != undefined) {
        	// remove it
        	denyMayJS[$uname] = denyMayJS[$uname].join(", ").replace(", "+$uval+", ",", ").split(", ");
        	denyMayJS[$uname] = denyMayJS[$uname].join(", ").replace(refront,"").split(", ");
        	denyMayJS[$uname] = denyMayJS[$uname].join(", ").replace(retail,"").split(", ");
        	denyMayJS[$uname] = denyMayJS[$uname].join(", ").replace(reboth,"").split(", ");
 
        	if (denyMayJS[$uname] == [""] || denyMayJS[$uname] == [] || denyMayJS[$uname].join("") == "") {
        		denyMayJS[$uname] = undefined;
        		delete denyMayJS[$uname];
        	}
        	// and add it
        	if (permitMayJS[$uname] == undefined) {
        		permitMayJS[$uname] = [$uval];
        	} else {
        		permitMayJS[$uname] = (permitMayJS[$uname].join(", ") + ", " + $uval).split(", ").sort();
        	}
        }
        });
      }
      else{
        $form_block.find("input.must_decision_pair[value='deny']").prop("checked", true);
        $form_block.find("input.may_decision_pair[value='deny']").prop("checked",true);
        // Reverse of above
        $uname = $form_block.find("span.attr_displayname").html();
        $rname = $form_block.find("span.attr_name").html();
        
        var uvalarray = [];
        if (policytypeJS[$uname] == 'PAO') {
        	displayvaluesetsJS[$uname].forEach(function(v,i){
        		uvalarray.push(v);
        	});
        } else {
        	$tuval = $form_block.find("span.attr_displayvalue").html();
        	uvalarray.push($tuval);
        }
      	// Set all the checked properties appropriately
  		if (policytypeJS[$uname] == 'PAO') {
  			sel="input.must_decision_pair[id^=radio_" + $rname + "_deny]";
  			$(sel).prop("checked", true);
  			sel="input.may_decision_pair[id^=radio_" + $rname + "_deny]";
  			$(sel).prop("checked", true);
  		}
  		 
        uvalarray.forEach(function(xuval,j){
        var $uval = xuval;
        var rval=$uval;
        rval1=rval.replace(RegExp("\\\|","g"),"\\\|");
        rval2=rval1.replace(RegExp("\\\+","g"),"\\\+");
        refront=RegExp("^"+rval2+", ");
        retail=RegExp(", "+rval2+"$");
        reboth=RegExp("^"+rval2+"$");
        if (permitInjectedJS[$uname] != undefined) {
        	// remove it
        	permitInjectedJS[$uname] = permitInjectedJS[$uname].join(", ").replace(", "+$uval+", ",", ").split(", ");
        	permitInjectedJS[$uname] = permitInjectedJS[$uname].join(", ").replace(refront,"").split(", ");
        	permitInjectedJS[$uname] = permitInjectedJS[$uname].join(", ").replace(retail,"").split(", ");
        	permitInjectedJS[$uname] = permitInjectedJS[$uname].join(", ").replace(reboth,"").split(", ");
 
        	if (permitInjectedJS[$uname] == [""] || permitInjectedJS[$uname] == [] || permitInjectedJS[$uname].join("") == "") {
        		permitInjectedJS[$uname] = undefined;
        		delete permitInjectedJS[$uname];
    		}
        	if (denyInjectedJS[$uname] == undefined) {
        		denyInjectedJS[$uname] = [$uval];
        	} else {
        		denyInjectedJS[$uname] = (denyInjectedJS[$uname].join(", ") + ", " + $uval).split(", ").sort();
        	}
        } 
        if (permitMayJS[$uname] != undefined) {
        	// remove it
        	permitMayJS[$uname] = permitMayJS[$uname].join(", ").replace(", "+$uval+", ",", ").split(", ");
        	permitMayJS[$uname] = permitMayJS[$uname].join(", ").replace(refront,"").split(", ");
        	permitMayJS[$uname] = permitMayJS[$uname].join(", ").replace(retail,"").split(", ");
        	permitMayJS[$uname] = permitMayJS[$uname].join(", ").replace(reboth,"").split(", ");
 
        	if (permitMayJS[$uname] == [""] || permitMayJS[$uname] == [] || permitMayJS[$uname].join("") == "") {
        		permitMayJS[$uname] = undefined;
        		delete permitMayJS[$uname];
        	}
        	if (denyMayJS[$uname] == undefined) {
        		denyMayJS[$uname] = [$uval];
        	} else {
        		denyMayJS[$uname] = (denyMayJS[$uname].join(", ") + ", " + $uval).split(", ").sort();
        	}
        }
        });	
      }
      updateAll();
    });
    
  }
  
</script>
 
  	
 
